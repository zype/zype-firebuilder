import java.text.SimpleDateFormat

/**
 * Copyright 2015-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
// Uncomment when using CrashlyticsComponent
//apply plugin: 'io.fabric'
apply from: "../artifacts.gradle"

repositories {
    // Uncomment when using CrashlyticsComponent
    //maven { url 'https://maven.fabric.io/public' }
}

buildscript {
    repositories {
        jcenter()
        // Uncomment when using CrashlyticsComponent
        //maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'me.tatarka:gradle-retrolambda:3.2.3'
        // Uncomment when using CrashlyticsComponent
        //classpath 'io.fabric.tools:gradle:1.+'
    }
}

android {
    def String versionCodeKey = 'VERSION_CODE'
    def versionPropertiesFile = file('version.properties')
    def Properties versionProperties = readVersionProperties(versionPropertiesFile)

    def df = new SimpleDateFormat("yyyy-MM-dd HH:mmZ")
    def String date = df.format(new Date(System.currentTimeMillis()))

    def getDate = { ->
        def dateFormatted = new Date()
        def formattedDate = dateFormatted.format('yyyyMMdd')
        return formattedDate
    }

    def currentCodeVersion = versionProperties[versionCodeKey].toString().toInteger()

    compileSdkVersion 23
    buildToolsVersion "25.0.0"

    defaultConfig {
        applicationId "com.zype.aftv.demo"
        minSdkVersion 21
        targetSdkVersion 23
        versionCode currentCodeVersion
        versionName "1.21.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    buildTypes {
        release {
            setVersionNameSuffix(".${currentCodeVersion}")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            def int newVersionCode = currentCodeVersion + 1
            versionProperties[versionCodeKey] = newVersionCode.toString()
            store(versionPropertiesFile, versionProperties)
        }
        debug {
            setVersionNameSuffix(".${currentCodeVersion} DEBUG [${date}]")
            testCoverageEnabled = true
        }
    }
    productFlavors {
        zype {
        }
        template {
            applicationId "<APPLICATION_ID>"
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputNameNew = "Zype-AFTV" + "-" + variant.productFlavors.name + "-" + variant.buildType.name +
                    "-" + defaultConfig.versionName + "-" + getDate() + ".apk"
            output.outputFile = new File(output.outputFile.parent, outputNameNew)
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // this is for jackson
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/services/com.fasterxml.jackson.core.JsonFactory'
        exclude 'META-INF/services/com.fasterxml.jackson.core.ObjectCodec'
        exclude 'META-INF/rxjava.properties'
    }

    lintOptions {
        abortOnError false
    }

}

public def readVersionProperties(File from) {
    if (from.canRead()) {
        def Properties result = new Properties()
        result.load(new FileInputStream(from))
        return result
    } else {
        throw new GradleException("Could not read version.properties!")
    }
}

public def store(File to, Properties properties) {
    properties.store(to.newWriter(), null)
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile 'junit:junit:4.12'
    androidTestCompile 'org.mockito:mockito-core:1.9.5'
    androidTestCompile ('com.android.support.test:rules:0.5') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile ('com.android.support.test:runner:0.5') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile 'com.google.dexmaker:dexmaker:1.2'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'

    androidTestCompile 'com.jayway.android.robotium:robotium-solo:5.3.1'

    compile project(':TVUIComponent')
    compile project(':UAMP')
    compile project(':AMZNMediaPlayerComponent')
//    compile project(':PassThroughAdsComponent')
    compile project(':VastAdsComponent')
    compile project(':AmazonInAppPurchaseComponent')
    compile project(':AkamaiAnalyticsComponent')
//    compile project(':LoggerAnalyticsComponent')
    // Uncomment when using CrashlyticsComponent
    /*compile('com.crashlytics.sdk.android:crashlytics:2.6.1@aar') {
        transitive = true;
    }*/
    compile project(':ZypeAuthComponent')
}
